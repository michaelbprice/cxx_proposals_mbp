Document number:    Nnnnn=yy-nnnn
Date:               yyyy-mm-dd
Project:            Programming Language C++, Library Working Group
Reply-to:           Michael Price <michael dot b dot price dot dev at gmail dot com>

A Proposal to Add a Fixed-size Multi-dimensional Array Wrapper to the Standard Library Technical Report

I. Introduction

A very brief high level view of your proposal, understandable by C++ committee members who are not necessarily experts in whatever domain you are addressing.


II. Motivation and Scope

C-style arrays are capable of having many dimensions, and this capability is used quite often in real-world code samples. *** NEED DATA *** A fixed-size array wrapper was added in a previous Technical Report (see N1548), but it did not directly address arrays with multiple dimensions, and thus is inconsistent with the modeling of the array wrapper type on the C-style array type.

It is currently possible to simulate a multi-dimensional array wrapper by nesting single-dimensional array wrappers as if they were Matryoshka dolls (see http://en.wikipedia.org/wiki/Matryoshka_doll), but this is not an ideal situation and could be quite confusing to novices who are interested in replacing their usage of C-style arrays with the library type. Users at all levels of expertise would benefit from these changes however.

    // The C-style way
    unsigned int arr_t[2][3][4] = { { {0, 1, 2, 3}, {4, 5, 6, 7}, {8, 9, 0, 1} },
                                  { {3, 2, 1, 0}, {7, 6, 5, 4}, {1, 0, 9, 8} }
                                };
                        
    // The wrapper way                      
    using namespace std;
    array<array<array<unsigned int, 2>, 3>, 4>  arr_w = { { {0, 1, 2, 3}, {4, 5, 6, 7}, {8, 9, 0, 1} },
                                                          { {3, 2, 1, 0}, {7, 6, 5, 4}, {1, 0, 9, 8} }
                                                        };

This proposal reduces the drudgery of declaring such constructs.

You can find a reference implementation of the ideas proposed herein at http://github.com/michaelbprice/



Why is this important? What kinds of problems does it address? What is the intended user community? What level of programmers (novice, experienced, expert) is it intended to support? What existing practice is it based on? How widespread is its use? How long has it been in use? Is there a reference implementation and test suite available for inspection?


III. Impact On the Standard

What other library components does does it depend on, and what depends on it? Is it a pure extension, or does it require changes to standard components? Can it be implemented using C++11 compilers and libraries, or does it require language or library features that are not part of C++11?


IV. Design Decisions

Why did you choose the specific design that you did? What alternatives did you consider, and what are the tradeoffs? What are the consequences of your choice, for users and implementers? What decisions are left up to implementers? If there are any similar libraries in use, how do their design decisions compare to yours?


Admittedly, the above example is a bit extreme, and can be made a bit better by creating a type alias

    using namespace std;
    template <typename T, size_t First, size_t Second, size_t Third>
    using three_dimensional_array = array<array<array<unsigned int, Third>, Second>, First>;
    
    three_dimensional_array<unsigned int, 2, 3, 4> arr_w = { { {0, 1, 2, 3}, {4, 5, 6, 7}, {8, 9, 0, 1} },
                                                             { {3, 2, 1, 0}, {7, 6, 5, 4}, {1, 0, 9, 8} }
                                                           };
                                                           
                                                           
                                                           
                                                           
    template <typename T, size_t First>
    using n_array = array<T, First>;
    
    template <typename T, size_t First, size_t ... Others>
    using n_array<T, First, Others...> = array<n_array<T, Others...>, First>;

In the first example, the axes of the multi-dimensional array appear in the reverse order as they appear in the 'traditional' array.  They only way in the current standard to correct this is to use a type alias as in the second example.  There, the sizes of the axes are provided as template parameters in the 'correct' order, but this approach requires a distinct type alias for every possible rank of array that is needed.  Variadic templates will not work here as
    


V. Technical Specifications

The committee needs technical specifications to be able to fully evaluate your proposal. Eventually these technical specifications will have to be in the form of full text for the standard or technical report, often known as "Standardese", but for an initial proposal there are several possibilities:

Provide some limited technical documentation. This might be OK for a very simple proposal such as a single function, but for anything beyond that the committee will likely ask for more detail. 
 
Provide technical documentation that is complete enough to fully evaluate your proposal. This documentation can be in the proposal itself or you can provide a link to documentation available on the web. If the committee likes your proposal, they will ask for a revised proposal with formal standardese wording. The committee recognizes that writing the formal ISO specification for a library component can be daunting and will make additional information and help available to get you started.
 
Provide full "Standardese." A standard is a contract between implementers and users, to make it possible for users to write portable code with specified semantics. It says what implementers are permitted to do, what they are required to do, and what users can and can't count on. The "standardese" should match the general style of exposition of the standard, and the specific rules set out in 17.5, Method of description (Informative) [description], but it does not have to match the exact margins or fonts or section numbering; those things will all be changed anyway.


VI. Acknowledgements


VII. References

